// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ //

&НаСервере
Процедура ПерепровестиДокументыСервер () Экспорт
	Для Каждого ДокументМенеджер Из Документы Цикл
		Выборка = ДокументМенеджер.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Проведен Тогда
				Выборка.Ссылка.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
КонецПроцедуры	

&НаСервере
Процедура УдалитьПомеченныеСервер () Экспорт
	Помеченные = НайтиПомеченныеНаУдаление();
	Рез = НайтиПоСсылкам(Помеченные);
	
	Для Каждого Эл Из Помеченные Цикл
		СтруктураПоиска = Новый Структура("Ссылка",Эл);
		СЧ = 0;
		Если Рез.НайтиСтроки(СтруктураПоиска).Количество() <= 1 Тогда
			СЧ = СЧ + 1;
			Эл.ПолучитьОбъект().Удалить();
		КонецЕсли;	
		//ТекстСообщения = "ru = 'Удалено:'; en = 'Deleted:'" + СЧ + "ru = ' объектов'; en = ' objects'";
		//Сообщить(НСтр(ТекстСообщения));
	КонецЦикла; 
КонецПроцедуры	

// ЗАГРУЗКА КУРСОВ ВАЛЮТ //

&НаСервере
Функция ПолучитьКурсКратностьВалюты (Валюта, Дата = '00010101') Экспорт
	Возврат РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата,Новый Структура("Валюта",Валюта));
КонецФункции	

// ЗАПОЛНЕНИЕ ДОКУМЕНТОВ //

&НаСервере
Функция ПолучитьЗначенияПоУмолчанию (ИмяТипаОбъекта,СписокРеквизитов) Экспорт
	мСписок = РазложитьСтрокуВМассивПодстрок(СписокРеквизитов);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Имя");
	ТЗ.Колонки.Добавить("Значение");
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Рез = РазложитьСтрокуВМассивПодстрок(ИмяТипаОбъекта,".");
	Если Рез[0] = "Документ" Тогда
		Выборка = Документы[Рез[1]].Выбрать(,,,"Дата Убыв");
		СЧ = 0;
		Пока Выборка.Следующий() Цикл
			СЧ = СЧ + 1;
			
			Мета = Выборка.Ссылка.Метаданные();
			
			Для Каждого Эл Из мСписок Цикл
				Если Мета.Реквизиты.Найти(Эл) = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				
				СтруктураПоиска = Новый Структура("Имя,Значение",Эл,Выборка[Эл]); 
				ИскомыеСтроки   = ТЗ.НайтиСтроки(СтруктураПоиска);
				Если ИскомыеСтроки.Количество() = 0 Тогда
					ИскомаяСтрока = ТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(ИскомаяСтрока,СтруктураПоиска); 
				Иначе	
					ИскомаяСтрока = ИскомыеСтроки[0];	
				КонецЕсли;	
				ИскомаяСтрока.Количество = ИскомаяСтрока.Количество + 1;
			КонецЦикла;
			
			Для Каждого Эл Из мСписок Цикл
				Для Каждого ТЧ Из Мета.ТабличныеЧасти Цикл
					Если ТЧ.Реквизиты.Найти(Эл) = Неопределено Тогда
						Продолжить;
					КонецЕсли;	
				
					Для Каждого СтрокаТЧ Из Выборка.Ссылка[ТЧ.Имя] Цикл
						СтруктураПоиска = Новый Структура("Имя,Значение",Эл,СтрокаТЧ[Эл]); 
						ИскомыеСтроки   = ТЗ.НайтиСтроки(СтруктураПоиска);
						Если ИскомыеСтроки.Количество() = 0 Тогда
							ИскомаяСтрока = ТЗ.Добавить();
							ЗаполнитьЗначенияСвойств(ИскомаяСтрока,СтруктураПоиска); 
						Иначе	
							ИскомаяСтрока = ИскомыеСтроки[0];	
						КонецЕсли;	
					КонецЦикла;	
				КонецЦикла;	
			КонецЦикла;	
			
			Если СЧ = 5 Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;	
	
	СтруктураВозврата = Новый Структура;
	
	ТЗ.Сортировать("Имя УБЫВ, Количество УБЫВ");
	
	Для Каждого СтрокаТЧ Из ТЗ Цикл
		Если СтруктураВозврата.Свойство(СтрокаТЧ.Имя) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураВозврата.Вставить(СтрокаТЧ.Имя,СтрокаТЧ.Значение);
	КонецЦикла;		
	
	СтруктураВозврата.Вставить("Пользователь",Константы.ПоследнийАвторизованныйПользователь.Получить());
	
	Возврат СтруктураВозврата;
КонецФункции	

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  _РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  _РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  _РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  _РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  _РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  _РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
&НаСервере
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Выполняет выгрузку объектов //
&НаСервере
Функция ВыгрузитьДанные() Экспорт
	ОбъектыМД = Новый Массив;
	ОбъектыМД.Добавить(Справочники);
	ОбъектыМД.Добавить(Документы);
	
	ИмяФайлаВыгрузки = ПолучитьИмяВременногоФайла("xml");
	
	мЗаписьXML = Новый ЗаписьXML;
	мЗаписьXML.ОткрытьФайл(ИмяФайлаВыгрузки, "UTF-8");
	
	мЗаписьXML.ЗаписатьОбъявлениеXML();
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("Заголовок");
	мЗаписьXML.ЗаписатьАтрибут("Источник","ЛичныеДеньги");
	мЗаписьXML.ЗаписатьАтрибут("Версия"  ,Метаданные.Версия);
	мЗаписьXML.ЗаписатьКонецЭлемента();
	
	Для Каждого МД Из ОбъектыМД Цикл
		Для Каждого Эл Из МД Цикл 
			Выборка = Эл.Выбрать();
			Пока Выборка.Следующий() Цикл
				ВыгрузитьСсылку(мЗаписьXML,Выборка.Ссылка);
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
	
	мЗаписьXML.Закрыть();
	
	Чтение = Новый ЧтениеТекста();
	Чтение.Открыть(ИмяФайлаВыгрузки);
	Текст = Чтение.Прочитать();
	Чтение.Закрыть();
	
	УдалитьФайлы(ИмяФайлаВыгрузки);
КонецФункции	

&НаСервере
Функция ВыгрузитьСсылку (ЗаписьXML, Элемент)
	МД        = Элемент.Метаданные();
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ЗаписатьНачалоЭлемента(МД.ПолноеИмя());
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьАтрибут("Тип"     ,"Строка");
	ЗаписьXML.ЗаписатьАтрибут("Значение",Строка(Элемент.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	
	Для Каждого Реквизит Из МД.СтандартныеРеквизиты Цикл
		ВыгрузитьРеквизит(ЗаписьXML,Реквизит.Имя,Элемент[Реквизит.Имя]);
	КонецЦикла;	
	
	Для Каждого Реквизит Из МД.Реквизиты Цикл
		ВыгрузитьРеквизит(ЗаписьXML,Реквизит.Имя,Элемент[Реквизит.Имя]);
	КонецЦикла;	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
	Для Каждого ТабЧасть Из МД.ТабличныеЧасти Цикл 
		ЗаписьXML.ЗаписатьНачалоЭлемента(ТабЧасть.Имя);
		Для Каждого СтрокаТЧ Из Элемент[ТабЧасть.Имя] Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("Запись");
			Для Каждого Реквизит Из ТабЧасть.Реквизиты Цикл
				ВыгрузитьРеквизит(ЗаписьXML,Реквизит,СтрокаТЧ[Реквизит.Имя]);
			КонецЦикла;	
			ЗаписьXML.ЗаписатьКонецЭлемента();	
		КонецЦикла;	
		ЗаписьXML.ЗаписатьКонецЭлемента();	
	КонецЦикла;	
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	
	ЗаписьXML.ЗаписатьКонецЭлемента();	
КонецФункции	

&НаСервере
Функция ВыгрузитьРеквизит (ЗаписьXML,ИмяРеквизита,Значение)
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяРеквизита);
	ЗаписьXML.ЗаписатьАтрибут("Тип",ПолучитьТип(Значение));
	ЗаписьXML.ЗаписатьАтрибут("Значение",Значение);
	ЗаписьXML.ЗаписатьКонецЭлемента();	
КонецФункции	

&НаСервере
Функция ПолучитьТип (Значение)
	Если ТипЗнч(Значение) = Тип ("Число") Тогда
		Возврат "Число";
	ИначеЕсли ТипЗнч(Значение) = Тип ("Строка") Тогда
		Возврат "Строка";
	ИначеЕсли ТипЗнч(Значение) = Тип ("Дата") Тогда
		Возврат "Дата";
	ИначеЕсли ТипЗнч(Значение) = Тип ("Булево") Тогда
		Возврат "Булево";
	ИначеЕсли ТипЗнч(Значение) = Тип ("Неопределено") Тогда
		Возврат "Неопределено";
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда	
		Возврат Значение.Метаданные().ПолноеИмя();
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда	
		Возврат Значение.Метаданные().ПолноеИмя();
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда	
		Возврат Значение.Метаданные().ПолноеИмя();
	КонецЕсли;	
КонецФункции

// Хэширование строки //

&НаСервере
Функция ХэшироватьСтроку (Строка) Экспорт
	мХэш = "";
	Для мНомерСимв = 1 По СтрДлина(Строка) Цикл 
		ЧастьХэша = "";
		мКод   = КодСимвола(Строка,мНомерСимв);
		мЧисло = Формат(мКод * мКод,"ЧГ=0"); 
		Если СтрДлина(мЧисло) <= 3 Тогда
			ЧастьХэша = Лев(мЧисло,2);
		Иначе
			СреднийСимвол = Цел(СтрДлина(мЧисло) / 2);
			ЧастьХэша = Сред(мЧисло,СреднийСимвол - 1,2);
		КонецЕсли;	
		мХэш = мХэш + ЧастьХэша;
	КонецЦикла;	
	Возврат мХэш;
КонецФункции	

// ОБНОВЛЕНИЕ ИБ //

&НаСервере
Процедура ПроверитьВыполнитьПервоначальноеЗаполнение () Экспорт
	Если Не Константы.ПервоначальноеЗаполнениеПроизведено.Получить() Тогда
		Справочники.Валюты.ПервоначальноеЗаполнение();
		Справочники.Кошельки.ПервоначальноеЗаполнение();
		Справочники.СтатьиДДС.ПервоначальноеЗаполнение();
		Справочники.Пользователи.ПервоначальноеЗаполнение();
		Константы.ПервоначальноеЗаполнениеПроизведено.Установить(Истина);
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура ПроверитьВыполнитьОбновление () Экспорт
	мТекВерсия =  Константы.НомерВерсии.Получить(); 
	Если Метаданные.Версия <> мТекВерсия Тогда
		КодыВерсий = РазложитьСтрокуВМассивПодстрок(мТекВерсия,".");
		мТекВерсия = "";
		Для Каждого КодВерсии Из КодыВерсий Цикл
			мТекВерсия = мТекВерсия + ?(мТекВерсия = "","",".") + Формат(Число(КодВерсии),"ЧЦ=2; ЧДЦ=; ЧН=00; ЧВН=");	
		КонецЦикла;
		
		Если мТекВерсия < "01.08.01" Тогда
			Обновление_1_8_1();
		КонецЕсли;	
		
		Если мТекВерсия < "01.08.02" Тогда
			Обновление_1_8_2();
		КонецЕсли;		
		
		Если мТекВерсия < "01.08.03" Тогда
			Обновление_1_8_3();
		КонецЕсли;		
		
		Если мТекВерсия < "01.09.02" Тогда
			Обновление_1_9_2();
		КонецЕсли;	
		
		Если мТекВерсия < "01.10.06" Тогда
			Обновление_1_10_6();
		КонецЕсли;	
		
		Если мТекВерсия < "01.11.02" Тогда
			Обновление_1_11_2();
		КонецЕсли;	
		
		Константы.НомерВерсии.Установить(Метаданные.Версия);
	КонецЕсли;	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ОБНОВЛЕНИЯ ИБ //

&НаСервере
Процедура Обновление_1_8_1 ()
	Выборка = Справочники.Кошельки.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.ЭтоГруппа И НЕ ЗначениеЗаполнено(Выборка.Тип) Тогда
			Эл     = Выборка.Ссылка.ПолучитьОбъект();
			Эл.Тип = Перечисления.ТипКошелька.Наличные;
			Эл.Записать();
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура Обновление_1_8_2 ()
	Выборка = Справочники.СтатьиДДС.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.ЭтоГруппа И Не ЗначениеЗаполнено(Выборка.СтатьяПлана) Тогда
			Эл             = Выборка.Ссылка.ПолучитьОбъект();
			Эл.СтатьяПлана = Справочники.СтатьиПлана.Прочее;
			Эл.Записать();
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура Обновление_1_8_3 ()
КонецПроцедуры

&НаСервере
Процедура Обновление_1_9_2 ()
	Менеджеры = Новый Массив;
	Менеджеры.Добавить(Документы.ПриходДенег);
	Менеджеры.Добавить(Документы.РасходДенег);
	Менеджеры.Добавить(Документы.ПеремещениеДенег);
	
	Для Каждого Менеджер Из Менеджеры Цикл
		Выборка = Менеджер.Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыНакопления.ДенежныеСредства.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Выборка.Ссылка);
			Набор.Прочитать();
			Если Набор.Количество() > 0 Тогда
				Для Каждого Запись Из Набор Цикл
					Запись.СтатьяДДС = Выборка.СтатьяДДС;
				КонецЦикла;	
				Набор.Записать();
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура Обновление_1_10_6 ()
КонецПроцедуры

&НаСервере
Процедура Обновление_1_11_2 ()
	Справочники.Пользователи.ПервоначальноеЗаполнение();
	
	Выборка = Документы.ПриходДенег.Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыНакопления.ДенежныеСредства.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(Выборка.Ссылка);
		Набор.Прочитать();
		Док = Выборка.Ссылка.ПолучитьОбъект();
		Если Набор.Количество() > 0 Тогда
			Для Каждого СтрокаТЧ Из Набор Цикл
				НоваяСтрока = Док.Суммы.Добавить();
				НоваяСтрока.СтатьяДДС = СтрокаТЧ.СтатьяДДС;
				НоваяСтрока.Сумма     = СтрокаТЧ.Сумма;
			КонецЦикла;	
		КонецЕсли;	
		Док.ОбменДанными.Загрузка = Истина;
		Док.Записать();
	КонецЦикла;
	
	Выборка = Документы.РасходДенег.Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыНакопления.ДенежныеСредства.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(Выборка.Ссылка);
		Набор.Прочитать();
		Док = Выборка.Ссылка.ПолучитьОбъект();
		Если Набор.Количество() > 0 Тогда
			Для Каждого СтрокаТЧ Из Набор Цикл
				НоваяСтрока = Док.Суммы.Добавить();
				НоваяСтрока.СтатьяДДС = СтрокаТЧ.СтатьяДДС;
				НоваяСтрока.Сумма     = СтрокаТЧ.Сумма;
			КонецЦикла;	
		КонецЕсли;	
		Док.ОбменДанными.Загрузка = Истина;
		Док.Записать();
	КонецЦикла;
КонецПроцедуры

